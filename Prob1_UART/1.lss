
1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003fc  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000068e  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e0       	ldi	r30, 0x00	; 0
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3c d0       	rcall	.+120    	; 0xd2 <main>
  5a:	50 c0       	rjmp	.+160    	; 0xfc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_1>:


// Interrupt handler example for INT0


SIGNAL(SIG_INTERRUPT0) {
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	df 93       	push	r29
  6a:	cf 93       	push	r28
  6c:	cd b7       	in	r28, 0x3d	; 61
  6e:	de b7       	in	r29, 0x3e	; 62



}
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

0000007e <uart_init>:
// Main program

//

void uart_init(void)
{
  7e:	df 93       	push	r29
  80:	cf 93       	push	r28
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62

	UBRRL= 0x33;
  86:	e9 e2       	ldi	r30, 0x29	; 41
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	83 e3       	ldi	r24, 0x33	; 51
  8c:	80 83       	st	Z, r24
	UCSRB = (1<<TXEN) | (1<<RXEN);
  8e:	ea e2       	ldi	r30, 0x2A	; 42
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	88 e1       	ldi	r24, 0x18	; 24
  94:	80 83       	st	Z, r24
	UCSRC = (1<<UCSZ0) | (1<<UCSZ1) | (1<<URSEL);
  96:	e0 e4       	ldi	r30, 0x40	; 64
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 83       	st	Z, r24
}
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

000000a4 <uart_send>:

void uart_send(unsigned char ch)
{
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	0f 92       	push	r0
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	89 83       	std	Y+1, r24	; 0x01

	while( ! ( UCSRA & (1<<UDRE ) ) );
  b0:	eb e2       	ldi	r30, 0x2B	; 43
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 2f       	mov	r24, r24
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	80 72       	andi	r24, 0x20	; 32
  bc:	90 70       	andi	r25, 0x00	; 0
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	b9 f3       	breq	.-18     	; 0xb0 <uart_send+0xc>
	UDR = ch;
  c2:	ec e2       	ldi	r30, 0x2C	; 44
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	80 83       	st	Z, r24

}
  ca:	0f 90       	pop	r0
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	08 95       	ret

000000d2 <main>:

int main(void)
{
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	0f 92       	push	r0
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
     unsigned char ch;
     uart_init() ;
  dc:	d0 df       	rcall	.-96     	; 0x7e <uart_init>

   while(1)
    {             // Infinite loop; define here the

     while( ! ( UCSRA & (1<<RXC ) ) );
  de:	eb e2       	ldi	r30, 0x2B	; 43
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 23       	and	r24, r24
  e6:	dc f7       	brge	.-10     	; 0xde <main+0xc>
     ch = UDR;
  e8:	ec e2       	ldi	r30, 0x2C	; 44
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	89 83       	std	Y+1, r24	; 0x01
     ch += 1;
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	89 83       	std	Y+1, r24	; 0x01
     uart_send( ch );
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	d5 df       	rcall	.-86     	; 0xa4 <uart_send>
  fa:	f1 cf       	rjmp	.-30     	; 0xde <main+0xc>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
