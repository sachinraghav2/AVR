
2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000568  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000568  000005dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000005ac  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000725  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e6       	ldi	r30, 0x68	; 104
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 37       	cpi	r26, 0x70	; 112
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e7       	ldi	r26, 0x70	; 112
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 37       	cpi	r26, 0x70	; 112
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	84 c2       	rjmp	.+1288   	; 0x564 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
// Main program



int main(void)
{
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	00 d0       	rcall	.+0      	; 0x64 <main+0x6>
  64:	cd b7       	in	r28, 0x3d	; 61
  66:	de b7       	in	r29, 0x3e	; 62
  	unsigned char colloc, rowloc;
  	
  	DDRD = 0xFF;
  68:	e1 e3       	ldi	r30, 0x31	; 49
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	80 83       	st	Z, r24
   key_prt = 0xFF;
  70:	e5 e3       	ldi	r30, 0x35	; 53
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	80 83       	st	Z, r24
   key_ddr = 0xF0;
  78:	e4 e3       	ldi	r30, 0x34	; 52
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 ef       	ldi	r24, 0xF0	; 240
  7e:	80 83       	st	Z, r24

   while(1)
    {             // Infinite loop; define here the
         do
         {
 				key_prt &= 0x0f;
  80:	a5 e3       	ldi	r26, 0x35	; 53
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e5 e3       	ldi	r30, 0x35	; 53
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	8f 70       	andi	r24, 0x0F	; 15
  8c:	8c 93       	st	X, r24
 			   colloc = (PINC & 0x0F);
  8e:	e3 e3       	ldi	r30, 0x33	; 51
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	8f 70       	andi	r24, 0x0F	; 15
  96:	8a 83       	std	Y+2, r24	; 0x02
   		}while(colloc != 0x0F);
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	8f 30       	cpi	r24, 0x0F	; 15
  9c:	89 f7       	brne	.-30     	; 0x80 <main+0x22>
   		
   		do
         {
 				do
 				{
 				   delay_ms(20);
  9e:	84 e1       	ldi	r24, 0x14	; 20
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	90 d0       	rcall	.+288    	; 0x1c4 <delay_ms>
 				   colloc = (PINC & 0x0F);
  a4:	e3 e3       	ldi	r30, 0x33	; 51
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 70       	andi	r24, 0x0F	; 15
  ac:	8a 83       	std	Y+2, r24	; 0x02
   	   	}while(colloc == 0x0F);
  ae:	8a 81       	ldd	r24, Y+2	; 0x02
  b0:	8f 30       	cpi	r24, 0x0F	; 15
  b2:	a9 f3       	breq	.-22     	; 0x9e <main+0x40>
   	   	
   		   delay_ms(20);
  b4:	84 e1       	ldi	r24, 0x14	; 20
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	85 d0       	rcall	.+266    	; 0x1c4 <delay_ms>
   		   colloc = (PINC & 0x0F);
  ba:	e3 e3       	ldi	r30, 0x33	; 51
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	8a 83       	std	Y+2, r24	; 0x02
   	  	}while(colloc == 0x0F);
  c4:	8a 81       	ldd	r24, Y+2	; 0x02
  c6:	8f 30       	cpi	r24, 0x0F	; 15
  c8:	51 f3       	breq	.-44     	; 0x9e <main+0x40>
   	  	
   	  while(1)
        {
          key_prt = 0xEF;
  ca:	e5 e3       	ldi	r30, 0x35	; 53
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	8f ee       	ldi	r24, 0xEF	; 239
  d0:	80 83       	st	Z, r24
          colloc = (PINC & 0x0F);
  d2:	e3 e3       	ldi	r30, 0x33	; 51
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	8a 83       	std	Y+2, r24	; 0x02

			 if(colloc != 0x0F)
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	8f 30       	cpi	r24, 0x0F	; 15
  e0:	11 f0       	breq	.+4      	; 0xe6 <main+0x88>
			 {
			 	rowloc = 0;
  e2:	19 82       	std	Y+1, r1	; 0x01
  e4:	29 c0       	rjmp	.+82     	; 0x138 <main+0xda>
			 	break;
   		 }
   		key_prt  = 0xDF;
  e6:	e5 e3       	ldi	r30, 0x35	; 53
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	8f ed       	ldi	r24, 0xDF	; 223
  ec:	80 83       	st	Z, r24
   		colloc = (key_pin  &( 0x0F));
  ee:	e3 e3       	ldi	r30, 0x33	; 51
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	8a 83       	std	Y+2, r24	; 0x02
   		
   		if(colloc != 0x0F)
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	8f 30       	cpi	r24, 0x0F	; 15
  fc:	19 f0       	breq	.+6      	; 0x104 <main+0xa6>
   		 {
			 	rowloc = 1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	1a c0       	rjmp	.+52     	; 0x138 <main+0xda>
			 	break;
   		 }
   		 key_prt  = 0xBF;
 104:	e5 e3       	ldi	r30, 0x35	; 53
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	8f eb       	ldi	r24, 0xBF	; 191
 10a:	80 83       	st	Z, r24
   		 colloc = (key_pin & 0x0F);
 10c:	e3 e3       	ldi	r30, 0x33	; 51
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	8a 83       	std	Y+2, r24	; 0x02
   		if(colloc != 0x0F)
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	8f 30       	cpi	r24, 0x0F	; 15
 11a:	19 f0       	breq	.+6      	; 0x122 <main+0xc4>
   		 {
			 	rowloc = 2;
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	0b c0       	rjmp	.+22     	; 0x138 <main+0xda>
			 	break;
   		 }
   		 key_prt  = 0x7F;
 122:	e5 e3       	ldi	r30, 0x35	; 53
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	8f e7       	ldi	r24, 0x7F	; 127
 128:	80 83       	st	Z, r24
   		 colloc = (key_pin & 0x0F);
 12a:	e3 e3       	ldi	r30, 0x33	; 51
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	8a 83       	std	Y+2, r24	; 0x02
   	    rowloc = 3;
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	89 83       	std	Y+1, r24	; 0x01
			 break;
		  }
		
		if(colloc == 0x0E)
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	8e 30       	cpi	r24, 0x0E	; 14
 13c:	79 f4       	brne	.+30     	; 0x15c <main+0xfe>
		  PORTD = (keypad[rowloc][0]);
 13e:	a2 e3       	ldi	r26, 0x32	; 50
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	88 2f       	mov	r24, r24
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	fc 01       	movw	r30, r24
 152:	e0 5a       	subi	r30, 0xA0	; 160
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	80 81       	ld	r24, Z
 158:	8c 93       	st	X, r24
 15a:	92 cf       	rjmp	.-220    	; 0x80 <main+0x22>
		
	  	else if(colloc == 0x0D)
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	8d 30       	cpi	r24, 0x0D	; 13
 160:	79 f4       	brne	.+30     	; 0x180 <main+0x122>
		  PORTD = (keypad[rowloc][1]);
 162:	a2 e3       	ldi	r26, 0x32	; 50
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	fc 01       	movw	r30, r24
 176:	ef 59       	subi	r30, 0x9F	; 159
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	80 81       	ld	r24, Z
 17c:	8c 93       	st	X, r24
 17e:	80 cf       	rjmp	.-256    	; 0x80 <main+0x22>
		
		else if (colloc == 0x0B)
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	8b 30       	cpi	r24, 0x0B	; 11
 184:	81 f4       	brne	.+32     	; 0x1a6 <main+0x148>
		  PORTD = (keypad[rowloc][2])  ;
 186:	a2 e3       	ldi	r26, 0x32	; 50
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	88 2f       	mov	r24, r24
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	fc 01       	movw	r30, r24
 19c:	e0 5a       	subi	r30, 0xA0	; 160
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	80 81       	ld	r24, Z
 1a2:	8c 93       	st	X, r24
 1a4:	6d cf       	rjmp	.-294    	; 0x80 <main+0x22>
		else
		  PORTD = (keypad[rowloc][3]);
 1a6:	a2 e3       	ldi	r26, 0x32	; 50
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	fc 01       	movw	r30, r24
 1ba:	ed 59       	subi	r30, 0x9D	; 157
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	80 81       	ld	r24, Z
 1c0:	8c 93       	st	X, r24
 1c2:	5e cf       	rjmp	.-324    	; 0x80 <main+0x22>

000001c4 <delay_ms>:
  return 0;

}

void delay_ms(unsigned int d)
{
 1c4:	df 93       	push	r29
 1c6:	cf 93       	push	r28
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	60 97       	sbiw	r28, 0x10	; 16
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
 1d8:	98 8b       	std	Y+16, r25	; 0x10
 1da:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(d);
 1dc:	8f 85       	ldd	r24, Y+15	; 0x0f
 1de:	98 89       	ldd	r25, Y+16	; 0x10
 1e0:	cc 01       	movw	r24, r24
 1e2:	a0 e0       	ldi	r26, 0x00	; 0
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	bc 01       	movw	r22, r24
 1e8:	cd 01       	movw	r24, r26
 1ea:	a3 d0       	rcall	.+326    	; 0x332 <__floatunsisf>
 1ec:	dc 01       	movw	r26, r24
 1ee:	cb 01       	movw	r24, r22
 1f0:	8b 87       	std	Y+11, r24	; 0x0b
 1f2:	9c 87       	std	Y+12, r25	; 0x0c
 1f4:	ad 87       	std	Y+13, r26	; 0x0d
 1f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	4a e7       	ldi	r20, 0x7A	; 122
 1fe:	53 e4       	ldi	r21, 0x43	; 67
 200:	6b 85       	ldd	r22, Y+11	; 0x0b
 202:	7c 85       	ldd	r23, Y+12	; 0x0c
 204:	8d 85       	ldd	r24, Y+13	; 0x0d
 206:	9e 85       	ldd	r25, Y+14	; 0x0e
 208:	22 d1       	rcall	.+580    	; 0x44e <__mulsf3>
 20a:	dc 01       	movw	r26, r24
 20c:	cb 01       	movw	r24, r22
 20e:	8f 83       	std	Y+7, r24	; 0x07
 210:	98 87       	std	Y+8, r25	; 0x08
 212:	a9 87       	std	Y+9, r26	; 0x09
 214:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e8       	ldi	r20, 0x80	; 128
 21c:	5f e3       	ldi	r21, 0x3F	; 63
 21e:	6f 81       	ldd	r22, Y+7	; 0x07
 220:	78 85       	ldd	r23, Y+8	; 0x08
 222:	89 85       	ldd	r24, Y+9	; 0x09
 224:	9a 85       	ldd	r25, Y+10	; 0x0a
 226:	55 d0       	rcall	.+170    	; 0x2d2 <__cmpsf2>
 228:	88 23       	and	r24, r24
 22a:	2c f4       	brge	.+10     	; 0x236 <delay_ms+0x72>
		__ticks = 1;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	9e 83       	std	Y+6, r25	; 0x06
 232:	8d 83       	std	Y+5, r24	; 0x05
 234:	3b c0       	rjmp	.+118    	; 0x2ac <delay_ms+0xe8>
	else if (__tmp > 65535)
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	3f ef       	ldi	r19, 0xFF	; 255
 23a:	4f e7       	ldi	r20, 0x7F	; 127
 23c:	57 e4       	ldi	r21, 0x47	; 71
 23e:	6f 81       	ldd	r22, Y+7	; 0x07
 240:	78 85       	ldd	r23, Y+8	; 0x08
 242:	89 85       	ldd	r24, Y+9	; 0x09
 244:	9a 85       	ldd	r25, Y+10	; 0x0a
 246:	ff d0       	rcall	.+510    	; 0x446 <__gesf2>
 248:	18 16       	cp	r1, r24
 24a:	3c f5       	brge	.+78     	; 0x29a <delay_ms+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e2       	ldi	r20, 0x20	; 32
 252:	51 e4       	ldi	r21, 0x41	; 65
 254:	6b 85       	ldd	r22, Y+11	; 0x0b
 256:	7c 85       	ldd	r23, Y+12	; 0x0c
 258:	8d 85       	ldd	r24, Y+13	; 0x0d
 25a:	9e 85       	ldd	r25, Y+14	; 0x0e
 25c:	f8 d0       	rcall	.+496    	; 0x44e <__mulsf3>
 25e:	dc 01       	movw	r26, r24
 260:	cb 01       	movw	r24, r22
 262:	bc 01       	movw	r22, r24
 264:	cd 01       	movw	r24, r26
 266:	39 d0       	rcall	.+114    	; 0x2da <__fixunssfsi>
 268:	dc 01       	movw	r26, r24
 26a:	cb 01       	movw	r24, r22
 26c:	9e 83       	std	Y+6, r25	; 0x06
 26e:	8d 83       	std	Y+5, r24	; 0x05
 270:	0f c0       	rjmp	.+30     	; 0x290 <delay_ms+0xcc>
 272:	89 e1       	ldi	r24, 0x19	; 25
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	9c 83       	std	Y+4, r25	; 0x04
 278:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 27a:	8b 81       	ldd	r24, Y+3	; 0x03
 27c:	9c 81       	ldd	r25, Y+4	; 0x04
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <delay_ms+0xba>
 282:	9c 83       	std	Y+4, r25	; 0x04
 284:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 286:	8d 81       	ldd	r24, Y+5	; 0x05
 288:	9e 81       	ldd	r25, Y+6	; 0x06
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	9e 83       	std	Y+6, r25	; 0x06
 28e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 290:	8d 81       	ldd	r24, Y+5	; 0x05
 292:	9e 81       	ldd	r25, Y+6	; 0x06
 294:	00 97       	sbiw	r24, 0x00	; 0
 296:	69 f7       	brne	.-38     	; 0x272 <delay_ms+0xae>
 298:	13 c0       	rjmp	.+38     	; 0x2c0 <delay_ms+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 29a:	6f 81       	ldd	r22, Y+7	; 0x07
 29c:	78 85       	ldd	r23, Y+8	; 0x08
 29e:	89 85       	ldd	r24, Y+9	; 0x09
 2a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 2a2:	1b d0       	rcall	.+54     	; 0x2da <__fixunssfsi>
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	9e 83       	std	Y+6, r25	; 0x06
 2aa:	8d 83       	std	Y+5, r24	; 0x05
 2ac:	8d 81       	ldd	r24, Y+5	; 0x05
 2ae:	9e 81       	ldd	r25, Y+6	; 0x06
 2b0:	9a 83       	std	Y+2, r25	; 0x02
 2b2:	89 83       	std	Y+1, r24	; 0x01
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	9a 81       	ldd	r25, Y+2	; 0x02
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <delay_ms+0xf4>
 2bc:	9a 83       	std	Y+2, r25	; 0x02
 2be:	89 83       	std	Y+1, r24	; 0x01
}
 2c0:	60 96       	adiw	r28, 0x10	; 16
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
 2cc:	cf 91       	pop	r28
 2ce:	df 91       	pop	r29
 2d0:	08 95       	ret

000002d2 <__cmpsf2>:
 2d2:	6c d0       	rcall	.+216    	; 0x3ac <__fp_cmp>
 2d4:	08 f4       	brcc	.+2      	; 0x2d8 <__cmpsf2+0x6>
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	08 95       	ret

000002da <__fixunssfsi>:
 2da:	94 d0       	rcall	.+296    	; 0x404 <__fp_splitA>
 2dc:	88 f0       	brcs	.+34     	; 0x300 <__fixunssfsi+0x26>
 2de:	9f 57       	subi	r25, 0x7F	; 127
 2e0:	90 f0       	brcs	.+36     	; 0x306 <__fixunssfsi+0x2c>
 2e2:	b9 2f       	mov	r27, r25
 2e4:	99 27       	eor	r25, r25
 2e6:	b7 51       	subi	r27, 0x17	; 23
 2e8:	a0 f0       	brcs	.+40     	; 0x312 <__fixunssfsi+0x38>
 2ea:	d1 f0       	breq	.+52     	; 0x320 <__fixunssfsi+0x46>
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	88 1f       	adc	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	1a f0       	brmi	.+6      	; 0x2fc <__fixunssfsi+0x22>
 2f6:	ba 95       	dec	r27
 2f8:	c9 f7       	brne	.-14     	; 0x2ec <__fixunssfsi+0x12>
 2fa:	12 c0       	rjmp	.+36     	; 0x320 <__fixunssfsi+0x46>
 2fc:	b1 30       	cpi	r27, 0x01	; 1
 2fe:	81 f0       	breq	.+32     	; 0x320 <__fixunssfsi+0x46>
 300:	9b d0       	rcall	.+310    	; 0x438 <__fp_zero>
 302:	b1 e0       	ldi	r27, 0x01	; 1
 304:	08 95       	ret
 306:	98 c0       	rjmp	.+304    	; 0x438 <__fp_zero>
 308:	67 2f       	mov	r22, r23
 30a:	78 2f       	mov	r23, r24
 30c:	88 27       	eor	r24, r24
 30e:	b8 5f       	subi	r27, 0xF8	; 248
 310:	39 f0       	breq	.+14     	; 0x320 <__fixunssfsi+0x46>
 312:	b9 3f       	cpi	r27, 0xF9	; 249
 314:	cc f3       	brlt	.-14     	; 0x308 <__fixunssfsi+0x2e>
 316:	86 95       	lsr	r24
 318:	77 95       	ror	r23
 31a:	67 95       	ror	r22
 31c:	b3 95       	inc	r27
 31e:	d9 f7       	brne	.-10     	; 0x316 <__fixunssfsi+0x3c>
 320:	3e f4       	brtc	.+14     	; 0x330 <__fixunssfsi+0x56>
 322:	90 95       	com	r25
 324:	80 95       	com	r24
 326:	70 95       	com	r23
 328:	61 95       	neg	r22
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
 32c:	8f 4f       	sbci	r24, 0xFF	; 255
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	08 95       	ret

00000332 <__floatunsisf>:
 332:	e8 94       	clt
 334:	09 c0       	rjmp	.+18     	; 0x348 <__floatsisf+0x12>

00000336 <__floatsisf>:
 336:	97 fb       	bst	r25, 7
 338:	3e f4       	brtc	.+14     	; 0x348 <__floatsisf+0x12>
 33a:	90 95       	com	r25
 33c:	80 95       	com	r24
 33e:	70 95       	com	r23
 340:	61 95       	neg	r22
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	8f 4f       	sbci	r24, 0xFF	; 255
 346:	9f 4f       	sbci	r25, 0xFF	; 255
 348:	99 23       	and	r25, r25
 34a:	a9 f0       	breq	.+42     	; 0x376 <__floatsisf+0x40>
 34c:	f9 2f       	mov	r31, r25
 34e:	96 e9       	ldi	r25, 0x96	; 150
 350:	bb 27       	eor	r27, r27
 352:	93 95       	inc	r25
 354:	f6 95       	lsr	r31
 356:	87 95       	ror	r24
 358:	77 95       	ror	r23
 35a:	67 95       	ror	r22
 35c:	b7 95       	ror	r27
 35e:	f1 11       	cpse	r31, r1
 360:	f8 cf       	rjmp	.-16     	; 0x352 <__floatsisf+0x1c>
 362:	fa f4       	brpl	.+62     	; 0x3a2 <__floatsisf+0x6c>
 364:	bb 0f       	add	r27, r27
 366:	11 f4       	brne	.+4      	; 0x36c <__floatsisf+0x36>
 368:	60 ff       	sbrs	r22, 0
 36a:	1b c0       	rjmp	.+54     	; 0x3a2 <__floatsisf+0x6c>
 36c:	6f 5f       	subi	r22, 0xFF	; 255
 36e:	7f 4f       	sbci	r23, 0xFF	; 255
 370:	8f 4f       	sbci	r24, 0xFF	; 255
 372:	9f 4f       	sbci	r25, 0xFF	; 255
 374:	16 c0       	rjmp	.+44     	; 0x3a2 <__floatsisf+0x6c>
 376:	88 23       	and	r24, r24
 378:	11 f0       	breq	.+4      	; 0x37e <__floatsisf+0x48>
 37a:	96 e9       	ldi	r25, 0x96	; 150
 37c:	11 c0       	rjmp	.+34     	; 0x3a0 <__floatsisf+0x6a>
 37e:	77 23       	and	r23, r23
 380:	21 f0       	breq	.+8      	; 0x38a <__floatsisf+0x54>
 382:	9e e8       	ldi	r25, 0x8E	; 142
 384:	87 2f       	mov	r24, r23
 386:	76 2f       	mov	r23, r22
 388:	05 c0       	rjmp	.+10     	; 0x394 <__floatsisf+0x5e>
 38a:	66 23       	and	r22, r22
 38c:	71 f0       	breq	.+28     	; 0x3aa <__floatsisf+0x74>
 38e:	96 e8       	ldi	r25, 0x86	; 134
 390:	86 2f       	mov	r24, r22
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	2a f0       	brmi	.+10     	; 0x3a2 <__floatsisf+0x6c>
 398:	9a 95       	dec	r25
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	88 1f       	adc	r24, r24
 3a0:	da f7       	brpl	.-10     	; 0x398 <__floatsisf+0x62>
 3a2:	88 0f       	add	r24, r24
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	97 f9       	bld	r25, 7
 3aa:	08 95       	ret

000003ac <__fp_cmp>:
 3ac:	99 0f       	add	r25, r25
 3ae:	00 08       	sbc	r0, r0
 3b0:	55 0f       	add	r21, r21
 3b2:	aa 0b       	sbc	r26, r26
 3b4:	e0 e8       	ldi	r30, 0x80	; 128
 3b6:	fe ef       	ldi	r31, 0xFE	; 254
 3b8:	16 16       	cp	r1, r22
 3ba:	17 06       	cpc	r1, r23
 3bc:	e8 07       	cpc	r30, r24
 3be:	f9 07       	cpc	r31, r25
 3c0:	c0 f0       	brcs	.+48     	; 0x3f2 <__fp_cmp+0x46>
 3c2:	12 16       	cp	r1, r18
 3c4:	13 06       	cpc	r1, r19
 3c6:	e4 07       	cpc	r30, r20
 3c8:	f5 07       	cpc	r31, r21
 3ca:	98 f0       	brcs	.+38     	; 0x3f2 <__fp_cmp+0x46>
 3cc:	62 1b       	sub	r22, r18
 3ce:	73 0b       	sbc	r23, r19
 3d0:	84 0b       	sbc	r24, r20
 3d2:	95 0b       	sbc	r25, r21
 3d4:	39 f4       	brne	.+14     	; 0x3e4 <__fp_cmp+0x38>
 3d6:	0a 26       	eor	r0, r26
 3d8:	61 f0       	breq	.+24     	; 0x3f2 <__fp_cmp+0x46>
 3da:	23 2b       	or	r18, r19
 3dc:	24 2b       	or	r18, r20
 3de:	25 2b       	or	r18, r21
 3e0:	21 f4       	brne	.+8      	; 0x3ea <__fp_cmp+0x3e>
 3e2:	08 95       	ret
 3e4:	0a 26       	eor	r0, r26
 3e6:	09 f4       	brne	.+2      	; 0x3ea <__fp_cmp+0x3e>
 3e8:	a1 40       	sbci	r26, 0x01	; 1
 3ea:	a6 95       	lsr	r26
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	81 1d       	adc	r24, r1
 3f0:	81 1d       	adc	r24, r1
 3f2:	08 95       	ret

000003f4 <__fp_split3>:
 3f4:	57 fd       	sbrc	r21, 7
 3f6:	90 58       	subi	r25, 0x80	; 128
 3f8:	44 0f       	add	r20, r20
 3fa:	55 1f       	adc	r21, r21
 3fc:	59 f0       	breq	.+22     	; 0x414 <__fp_splitA+0x10>
 3fe:	5f 3f       	cpi	r21, 0xFF	; 255
 400:	71 f0       	breq	.+28     	; 0x41e <__fp_splitA+0x1a>
 402:	47 95       	ror	r20

00000404 <__fp_splitA>:
 404:	88 0f       	add	r24, r24
 406:	97 fb       	bst	r25, 7
 408:	99 1f       	adc	r25, r25
 40a:	61 f0       	breq	.+24     	; 0x424 <__fp_splitA+0x20>
 40c:	9f 3f       	cpi	r25, 0xFF	; 255
 40e:	79 f0       	breq	.+30     	; 0x42e <__fp_splitA+0x2a>
 410:	87 95       	ror	r24
 412:	08 95       	ret
 414:	12 16       	cp	r1, r18
 416:	13 06       	cpc	r1, r19
 418:	14 06       	cpc	r1, r20
 41a:	55 1f       	adc	r21, r21
 41c:	f2 cf       	rjmp	.-28     	; 0x402 <__fp_split3+0xe>
 41e:	46 95       	lsr	r20
 420:	f1 df       	rcall	.-30     	; 0x404 <__fp_splitA>
 422:	08 c0       	rjmp	.+16     	; 0x434 <__fp_splitA+0x30>
 424:	16 16       	cp	r1, r22
 426:	17 06       	cpc	r1, r23
 428:	18 06       	cpc	r1, r24
 42a:	99 1f       	adc	r25, r25
 42c:	f1 cf       	rjmp	.-30     	; 0x410 <__fp_splitA+0xc>
 42e:	86 95       	lsr	r24
 430:	71 05       	cpc	r23, r1
 432:	61 05       	cpc	r22, r1
 434:	08 94       	sec
 436:	08 95       	ret

00000438 <__fp_zero>:
 438:	e8 94       	clt

0000043a <__fp_szero>:
 43a:	bb 27       	eor	r27, r27
 43c:	66 27       	eor	r22, r22
 43e:	77 27       	eor	r23, r23
 440:	cb 01       	movw	r24, r22
 442:	97 f9       	bld	r25, 7
 444:	08 95       	ret

00000446 <__gesf2>:
 446:	b2 df       	rcall	.-156    	; 0x3ac <__fp_cmp>
 448:	08 f4       	brcc	.+2      	; 0x44c <__gesf2+0x6>
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	08 95       	ret

0000044e <__mulsf3>:
 44e:	0b d0       	rcall	.+22     	; 0x466 <__mulsf3x>
 450:	78 c0       	rjmp	.+240    	; 0x542 <__fp_round>
 452:	69 d0       	rcall	.+210    	; 0x526 <__fp_pscA>
 454:	28 f0       	brcs	.+10     	; 0x460 <__stack+0x1>
 456:	6e d0       	rcall	.+220    	; 0x534 <__fp_pscB>
 458:	18 f0       	brcs	.+6      	; 0x460 <__stack+0x1>
 45a:	95 23       	and	r25, r21
 45c:	09 f0       	breq	.+2      	; 0x460 <__stack+0x1>
 45e:	5a c0       	rjmp	.+180    	; 0x514 <__fp_inf>
 460:	5f c0       	rjmp	.+190    	; 0x520 <__fp_nan>
 462:	11 24       	eor	r1, r1
 464:	ea cf       	rjmp	.-44     	; 0x43a <__fp_szero>

00000466 <__mulsf3x>:
 466:	c6 df       	rcall	.-116    	; 0x3f4 <__fp_split3>
 468:	a0 f3       	brcs	.-24     	; 0x452 <__mulsf3+0x4>

0000046a <__mulsf3_pse>:
 46a:	95 9f       	mul	r25, r21
 46c:	d1 f3       	breq	.-12     	; 0x462 <__stack+0x3>
 46e:	95 0f       	add	r25, r21
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	55 1f       	adc	r21, r21
 474:	62 9f       	mul	r22, r18
 476:	f0 01       	movw	r30, r0
 478:	72 9f       	mul	r23, r18
 47a:	bb 27       	eor	r27, r27
 47c:	f0 0d       	add	r31, r0
 47e:	b1 1d       	adc	r27, r1
 480:	63 9f       	mul	r22, r19
 482:	aa 27       	eor	r26, r26
 484:	f0 0d       	add	r31, r0
 486:	b1 1d       	adc	r27, r1
 488:	aa 1f       	adc	r26, r26
 48a:	64 9f       	mul	r22, r20
 48c:	66 27       	eor	r22, r22
 48e:	b0 0d       	add	r27, r0
 490:	a1 1d       	adc	r26, r1
 492:	66 1f       	adc	r22, r22
 494:	82 9f       	mul	r24, r18
 496:	22 27       	eor	r18, r18
 498:	b0 0d       	add	r27, r0
 49a:	a1 1d       	adc	r26, r1
 49c:	62 1f       	adc	r22, r18
 49e:	73 9f       	mul	r23, r19
 4a0:	b0 0d       	add	r27, r0
 4a2:	a1 1d       	adc	r26, r1
 4a4:	62 1f       	adc	r22, r18
 4a6:	83 9f       	mul	r24, r19
 4a8:	a0 0d       	add	r26, r0
 4aa:	61 1d       	adc	r22, r1
 4ac:	22 1f       	adc	r18, r18
 4ae:	74 9f       	mul	r23, r20
 4b0:	33 27       	eor	r19, r19
 4b2:	a0 0d       	add	r26, r0
 4b4:	61 1d       	adc	r22, r1
 4b6:	23 1f       	adc	r18, r19
 4b8:	84 9f       	mul	r24, r20
 4ba:	60 0d       	add	r22, r0
 4bc:	21 1d       	adc	r18, r1
 4be:	82 2f       	mov	r24, r18
 4c0:	76 2f       	mov	r23, r22
 4c2:	6a 2f       	mov	r22, r26
 4c4:	11 24       	eor	r1, r1
 4c6:	9f 57       	subi	r25, 0x7F	; 127
 4c8:	50 40       	sbci	r21, 0x00	; 0
 4ca:	8a f0       	brmi	.+34     	; 0x4ee <__mulsf3_pse+0x84>
 4cc:	e1 f0       	breq	.+56     	; 0x506 <__mulsf3_pse+0x9c>
 4ce:	88 23       	and	r24, r24
 4d0:	4a f0       	brmi	.+18     	; 0x4e4 <__mulsf3_pse+0x7a>
 4d2:	ee 0f       	add	r30, r30
 4d4:	ff 1f       	adc	r31, r31
 4d6:	bb 1f       	adc	r27, r27
 4d8:	66 1f       	adc	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	91 50       	subi	r25, 0x01	; 1
 4e0:	50 40       	sbci	r21, 0x00	; 0
 4e2:	a9 f7       	brne	.-22     	; 0x4ce <__mulsf3_pse+0x64>
 4e4:	9e 3f       	cpi	r25, 0xFE	; 254
 4e6:	51 05       	cpc	r21, r1
 4e8:	70 f0       	brcs	.+28     	; 0x506 <__mulsf3_pse+0x9c>
 4ea:	14 c0       	rjmp	.+40     	; 0x514 <__fp_inf>
 4ec:	a6 cf       	rjmp	.-180    	; 0x43a <__fp_szero>
 4ee:	5f 3f       	cpi	r21, 0xFF	; 255
 4f0:	ec f3       	brlt	.-6      	; 0x4ec <__mulsf3_pse+0x82>
 4f2:	98 3e       	cpi	r25, 0xE8	; 232
 4f4:	dc f3       	brlt	.-10     	; 0x4ec <__mulsf3_pse+0x82>
 4f6:	86 95       	lsr	r24
 4f8:	77 95       	ror	r23
 4fa:	67 95       	ror	r22
 4fc:	b7 95       	ror	r27
 4fe:	f7 95       	ror	r31
 500:	e7 95       	ror	r30
 502:	9f 5f       	subi	r25, 0xFF	; 255
 504:	c1 f7       	brne	.-16     	; 0x4f6 <__mulsf3_pse+0x8c>
 506:	fe 2b       	or	r31, r30
 508:	88 0f       	add	r24, r24
 50a:	91 1d       	adc	r25, r1
 50c:	96 95       	lsr	r25
 50e:	87 95       	ror	r24
 510:	97 f9       	bld	r25, 7
 512:	08 95       	ret

00000514 <__fp_inf>:
 514:	97 f9       	bld	r25, 7
 516:	9f 67       	ori	r25, 0x7F	; 127
 518:	80 e8       	ldi	r24, 0x80	; 128
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	08 95       	ret

00000520 <__fp_nan>:
 520:	9f ef       	ldi	r25, 0xFF	; 255
 522:	80 ec       	ldi	r24, 0xC0	; 192
 524:	08 95       	ret

00000526 <__fp_pscA>:
 526:	00 24       	eor	r0, r0
 528:	0a 94       	dec	r0
 52a:	16 16       	cp	r1, r22
 52c:	17 06       	cpc	r1, r23
 52e:	18 06       	cpc	r1, r24
 530:	09 06       	cpc	r0, r25
 532:	08 95       	ret

00000534 <__fp_pscB>:
 534:	00 24       	eor	r0, r0
 536:	0a 94       	dec	r0
 538:	12 16       	cp	r1, r18
 53a:	13 06       	cpc	r1, r19
 53c:	14 06       	cpc	r1, r20
 53e:	05 06       	cpc	r0, r21
 540:	08 95       	ret

00000542 <__fp_round>:
 542:	09 2e       	mov	r0, r25
 544:	03 94       	inc	r0
 546:	00 0c       	add	r0, r0
 548:	11 f4       	brne	.+4      	; 0x54e <__fp_round+0xc>
 54a:	88 23       	and	r24, r24
 54c:	52 f0       	brmi	.+20     	; 0x562 <__fp_round+0x20>
 54e:	bb 0f       	add	r27, r27
 550:	40 f4       	brcc	.+16     	; 0x562 <__fp_round+0x20>
 552:	bf 2b       	or	r27, r31
 554:	11 f4       	brne	.+4      	; 0x55a <__fp_round+0x18>
 556:	60 ff       	sbrs	r22, 0
 558:	04 c0       	rjmp	.+8      	; 0x562 <__fp_round+0x20>
 55a:	6f 5f       	subi	r22, 0xFF	; 255
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	8f 4f       	sbci	r24, 0xFF	; 255
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	08 95       	ret

00000564 <_exit>:
 564:	f8 94       	cli

00000566 <__stop_program>:
 566:	ff cf       	rjmp	.-2      	; 0x566 <__stop_program>
