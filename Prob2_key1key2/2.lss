
2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000414  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000067b  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__vector_1>
   4:	49 c0       	rjmp	.+146    	; 0x98 <__vector_2>
   6:	65 c0       	rjmp	.+202    	; 0xd2 <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e7       	ldi	r30, 0x7A	; 122
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	60 d0       	rcall	.+192    	; 0x11a <main>
  5a:	8d c0       	rjmp	.+282    	; 0x176 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_1>:
#include <avr\interrupt.h>       // Add the necessary ones
#include <avr\signal.h>          // here

// Interrupt handler example for INT0

ISR(INT0_vect) {
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	ef 93       	push	r30
  6c:	ff 93       	push	r31
  6e:	df 93       	push	r29
  70:	cf 93       	push	r28
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
          TCNT2 =0;
  76:	e4 e4       	ldi	r30, 0x44	; 68
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	10 82       	st	Z, r1
          OCR2 = 122;
  7c:	e3 e4       	ldi	r30, 0x43	; 67
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	8a e7       	ldi	r24, 0x7A	; 122
  82:	80 83       	st	Z, r24

}
  84:	cf 91       	pop	r28
  86:	df 91       	pop	r29
  88:	ff 91       	pop	r31
  8a:	ef 91       	pop	r30
  8c:	8f 91       	pop	r24
  8e:	0f 90       	pop	r0
  90:	0f be       	out	0x3f, r0	; 63
  92:	0f 90       	pop	r0
  94:	1f 90       	pop	r1
  96:	18 95       	reti

00000098 <__vector_2>:

ISR(INT1_vect) {
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	8f 93       	push	r24
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
          TCNT2 = 0;
  b0:	e4 e4       	ldi	r30, 0x44	; 68
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
          OCR2 = 244;
  b6:	e3 e4       	ldi	r30, 0x43	; 67
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	84 ef       	ldi	r24, 0xF4	; 244
  bc:	80 83       	st	Z, r24
}
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	ff 91       	pop	r31
  c4:	ef 91       	pop	r30
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <__vector_3>:

ISR(TIMER2_COMP_vect ){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
	
	 PORTB ^= 1 ;
  f0:	a8 e3       	ldi	r26, 0x38	; 56
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	e8 e3       	ldi	r30, 0x38	; 56
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	89 27       	eor	r24, r25
  fe:	8c 93       	st	X, r24
}
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:
// ***********************************************************
// Main program
//
int main(void)
{
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 	DDRB = 1;
 122:	e7 e3       	ldi	r30, 0x37	; 55
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
	DDRD = 0;
 12a:	e1 e3       	ldi	r30, 0x31	; 49
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	10 82       	st	Z, r1
	PORTD |= (1<<PD2) | (1<<PD3);
 130:	a2 e3       	ldi	r26, 0x32	; 50
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e2 e3       	ldi	r30, 0x32	; 50
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8c 60       	ori	r24, 0x0C	; 12
 13c:	8c 93       	st	X, r24


	TCNT2 =0;
 13e:	e4 e4       	ldi	r30, 0x44	; 68
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	10 82       	st	Z, r1
	OCR2 =0;
 144:	e3 e4       	ldi	r30, 0x43	; 67
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	10 82       	st	Z, r1
	TIMSK = (1<<OCIE2);
 14a:	e9 e5       	ldi	r30, 0x59	; 89
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 e8       	ldi	r24, 0x80	; 128
 150:	80 83       	st	Z, r24
	TCCR2 = (1<<CS22) | (1<<CS21)  | (1<<CS20) | (1<<WGM21) ;
 152:	e5 e4       	ldi	r30, 0x45	; 69
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	80 83       	st	Z, r24
	GICR = (1<<INT0) |  (1<<INT1);
 15a:	eb e5       	ldi	r30, 0x5B	; 91
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 ec       	ldi	r24, 0xC0	; 192
 160:	80 83       	st	Z, r24
	MCUCR |=  (1<<ISC11)  |  (1<<ISC01) | (1<<SE);
 162:	a5 e5       	ldi	r26, 0x55	; 85
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e5 e5       	ldi	r30, 0x55	; 85
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	8a 68       	ori	r24, 0x8A	; 138
 16e:	8c 93       	st	X, r24
	sei();
 170:	78 94       	sei
	
   while(1)             // Infinite loop; define here the
    {
    	asm("sleep");
 172:	88 95       	sleep
 174:	fe cf       	rjmp	.-4      	; 0x172 <main+0x58>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
