
2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  000001a2  00000216  2**0
                  ALLOC
  2 .stab         0000048c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000692  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__vector_1>
   4:	4a c0       	rjmp	.+148    	; 0x9a <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ea       	ldi	r30, 0xA2	; 162
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3e d0       	rcall	.+124    	; 0xd6 <main>
  5a:	a1 c0       	rjmp	.+322    	; 0x19e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_1>:
int flag1,flag2;
// Interrupt handler example for INT0
void delay1s(void);


ISR(INT0_vect) {
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

        flag1 =1;
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	90 93 63 00 	sts	0x0063, r25
  7c:	80 93 62 00 	sts	0x0062, r24
        flag2 =0;
  80:	10 92 61 00 	sts	0x0061, r1
  84:	10 92 60 00 	sts	0x0060, r1
}
  88:	cf 91       	pop	r28
  8a:	df 91       	pop	r29
  8c:	9f 91       	pop	r25
  8e:	8f 91       	pop	r24
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <__vector_2>:


ISR(INT1_vect) {
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	0f 92       	push	r0
  a2:	11 24       	eor	r1, r1
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62

       flag1 =0;
  b0:	10 92 63 00 	sts	0x0063, r1
  b4:	10 92 62 00 	sts	0x0062, r1
       flag2 =1;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	90 93 61 00 	sts	0x0061, r25
  c0:	80 93 60 00 	sts	0x0060, r24

}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <main>:

//

int main(void)

{
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62

 	DDRB = 1;
  de:	e7 e3       	ldi	r30, 0x37	; 55
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24
	DDRD = 0;
  e6:	e1 e3       	ldi	r30, 0x31	; 49
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	10 82       	st	Z, r1
	PORTD |= (1<<PD2) | (1<<PD3);
  ec:	a2 e3       	ldi	r26, 0x32	; 50
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	e2 e3       	ldi	r30, 0x32	; 50
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	8c 60       	ori	r24, 0x0C	; 12
  f8:	8c 93       	st	X, r24


	GICR = (1<<INT0) |  (1<<INT1);
  fa:	eb e5       	ldi	r30, 0x5B	; 91
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 ec       	ldi	r24, 0xC0	; 192
 100:	80 83       	st	Z, r24
	MCUCR |=  (1<<ISC11)  |  (1<<ISC01) | (1<<SE);
 102:	a5 e5       	ldi	r26, 0x55	; 85
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e5 e5       	ldi	r30, 0x55	; 85
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8a 68       	ori	r24, 0x8A	; 138
 10e:	8c 93       	st	X, r24

	sei();
 110:	78 94       	sei

	

   while(1)             // Infinite loop; define here the
    {
      if( flag1 )
 112:	80 91 62 00 	lds	r24, 0x0062
 116:	90 91 63 00 	lds	r25, 0x0063
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	49 f0       	breq	.+18     	; 0x130 <main+0x5a>
      {
    	  PORTB ^= 1 ;
 11e:	a8 e3       	ldi	r26, 0x38	; 56
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e8 e3       	ldi	r30, 0x38	; 56
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	90 81       	ld	r25, Z
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	89 27       	eor	r24, r25
 12c:	8c 93       	st	X, r24
    	  delay1s();
 12e:	11 d0       	rcall	.+34     	; 0x152 <delay1s>
    	
    	}
     if( flag2 )
 130:	80 91 60 00 	lds	r24, 0x0060
 134:	90 91 61 00 	lds	r25, 0x0061
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	59 f3       	breq	.-42     	; 0x112 <main+0x3c>
     {
    	  PORTB ^= 1 ;
 13c:	a8 e3       	ldi	r26, 0x38	; 56
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e8 e3       	ldi	r30, 0x38	; 56
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	89 27       	eor	r24, r25
 14a:	8c 93       	st	X, r24
    	  delay1s();
 14c:	02 d0       	rcall	.+4      	; 0x152 <delay1s>
    	  delay1s();
 14e:	01 d0       	rcall	.+2      	; 0x152 <delay1s>
 150:	e0 cf       	rjmp	.-64     	; 0x112 <main+0x3c>

00000152 <delay1s>:
   return 0;

}

void delay1s(void)
{
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
  TCNT1H = 0xC2;
 15a:	ed e4       	ldi	r30, 0x4D	; 77
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	82 ec       	ldi	r24, 0xC2	; 194
 160:	80 83       	st	Z, r24
  TCNT1L = 0xF6;
 162:	ec e4       	ldi	r30, 0x4C	; 76
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	86 ef       	ldi	r24, 0xF6	; 246
 168:	80 83       	st	Z, r24

	TCCR1A = 0X00;
 16a:	ef e4       	ldi	r30, 0x4F	; 79
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	10 82       	st	Z, r1
	TCCR1B = 0X03;
 170:	ee e4       	ldi	r30, 0x4E	; 78
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	80 83       	st	Z, r24
	
	while((TIFR & (0X1<<TOV1 ) ) == 0);
 178:	e8 e5       	ldi	r30, 0x58	; 88
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	88 2f       	mov	r24, r24
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	84 70       	andi	r24, 0x04	; 4
 184:	90 70       	andi	r25, 0x00	; 0
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	b9 f3       	breq	.-18     	; 0x178 <delay1s+0x26>
	
	TCCR1B = 0;
 18a:	ee e4       	ldi	r30, 0x4E	; 78
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	10 82       	st	Z, r1
	TIFR = 0X1<<TOV1;
 190:	e8 e5       	ldi	r30, 0x58	; 88
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	80 83       	st	Z, r24
}
 198:	cf 91       	pop	r28
 19a:	df 91       	pop	r29
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
